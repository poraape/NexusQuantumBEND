# docker-compose.yml
version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP port for Celery
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_api
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend:/app
      # Volume para uploads temporários, compartilhado com o worker
      - nexus_uploads:/tmp/nexus_uploads
    ports:
      - "8000:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY} # Passa a chave da IA para o container

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery_worker
    command: celery -A celery_config.celery_app worker --loglevel=info
    volumes:
      - ./backend:/app
      # Volume para uploads temporários, compartilhado com a api
      - nexus_uploads:/tmp/nexus_uploads
    depends_on:
      backend: {} # Depende do backend para ter o código fonte
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY} # Passa a chave da IA para o container

volumes:
  rabbitmq_data:
  redis_data:
  nexus_uploads: # Volume compartilhado para os arquivos
